input_dir: "wgs_vaginal_swab"
metadata: "wgs_vaginal_swab/metadata_file.txt"  #Metadata on samples
out_dir: "test1_kraken_results"
classifier: "kraken2" # in ["kraken2", "centrifuge"]
mode: "ont"
threads: 4


kraken_options:
  db: "db_shotgun" #Directory of indexed reference database
  threads: 8
  confidence: 0.1

bracken_options: #Running bracken will use the indexed database referenced in "kraken_options"
  run_bracken: TRUE #Whether to run bracken or not
  read_length:     # the read length of your data: e.g., if you are using 1500 bp reads, set it to 1500
  threshold: 10
  level: "S"    #Estimate relative abundance at a given taxa level


kraken_build_options:
  # The output of kraken2-build will be directed to --db in kraken_options
  run_build: FALSE #TRUE or FALSE
  add_genome:         # Path to .fa file of host genome if different from human. Make sure run_build is set to FALSE
  method: "target"
  references:                   # in ["greengenes", "rdp", "silva"] if method=="target" ; list in ["archaea", "bacteria", "plasmid", "viral", "fungi", "human"]




centrifuge_build_options:
  centrifuge_db: "path/to/custom_db"
  reference_name: "ev"

centrifuge_options:
  threads:

quality:
  perform: TRUE   #TRUE/FALSE
  threshold: 2  #Filter on a minimum average read quality score
  head_crop:   #Trim n nucleotides from start of read
  tail_crop:   #Trim n nucleotides from end of read
  min_length: 800  #Filter on a minimum read length
  max_length: 1900  #Filter on a maximum read length


## Align to reference host genome to eliminate host contamination reads


run_align: TRUE #TRUE/FALSE whether to perform alignment or not
host_reference: "./human_genome_reference/GCA_000001405.15_GRCh38_genomic.fna" #Path to host genome fa file

minimap2_options:
   threads: 8

filter_bracken:
   filter: "include" # in ["include", "exclude"]
   exclude:        # List of tax ids to include or exclude


# Downstream Analysis

## Diversity analysis

### Perform alpha diversity
alpha_diversity:
  measures: ["Observed", "Chao1", "Shannon", "Simpson"] # Can select only the wanted measures
  title: "Alpha Diversity"
  color:
  shape:
  xaxis_label:

### Perform beta diversity
beta_diversity:
  method:           # in ["DCA", "CCA", "RDA", "CAP", DPCoA", "NMDS", "PCoA"]
  distance:       # in ["bray", "uunifrac", "wunifrac", "jaccard", "minkowski"]
  color:
  shape:
  title: "Beta Diversity"
  type: "taxa"            # in ["samples", "sites", "species", "taxa", "biplot", "split", "scree"]
  wrap:               # Group samples by categorical factor in the metadata table. Only one categorical factor possible.
  label:              # Column name from metadata to map to text labels on the plot
## Taxonomic barplots

taxonomic_barplots:
  title:
  groups:               # Group samples by categorical factor in the metadata table. Can be a list of different groupments ==> pdf file
  tax_ranks:            # List of tax levels on which to do the analysis (One pdf file per tax level)
  abundance: "relative"   # in ["absolut", "relative"]
  abundance_threshold:  0 # in percentage if relative and in counts if absolut !
  label:
  lineage:
  rank:

lineage_barplots:
  groups:       # Group samples by categorical factor in the metadata table
  analysis_rank:  # Tax level on which to do the analysis
  lineage:        # If you want to explore a given lineage thouroughly
  rank:         # The rank of the lineage you want to explore !!!
  abundance:    # in ["absolut", "relative"]
  abundance_threshold: 0    # in percentage if relative and in counts if absolut !
  label:                # if you want to label the samples in the x-axis


## Estimate differential abundance
diff_abund:
  ### To specify taxonomic levels for analysis (can be a list e.g ["Family","Genus","Species"]
  subset:
  ### To specify on which group feature to estimate differential abundance (can be list e.g ["Status", "Treatment"] and must be a 2-groups feature
  groups:
  ### If you want to estimate differential abundance for a particular lineage
  lineage:      # e.g "Lactobacillus"
  rank:         #Rank of the lineage chosen e.g "Genus"
  # Filtering for compositional data analysis
  ## Keep only samples with > min_reads (default 5000)
  #min_reads: 5000
  ## Keep only OTUs with relative abundance > abundance_threshold (default 0.1%)
  #abundance_threshold: 0.1
  ## Keep OTUs that are found in at least otu_cutoff fraction of samples (default is 30%)
  #otu_cutoff: 30

## Abundance Heatmap
abund_heatmap:
  subset:
  method:
  distance:
  sample_label:
  taxa_label:
  wrap: